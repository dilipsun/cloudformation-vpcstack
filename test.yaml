Parameters:
  EnvironmentName:
   Description: env name
   Type: String
   Default: test
  VpcCIDR:
   Description: VPC CIDR Block
   Type: String
   Default: 192.168.0.0/16
  Websubnet1CIDR:
   Description: Web subnet 1
   Type: String
   Default: 192.168.1.0/24
  Websubnet2CIDR:
   Description: Web subnet 2
   Type: String
   Default: 192.168.2.0/24
  Appsubnet1CIDR:
   Description: App subnet 1
   Type: String
   Default: 192.168.3.0/24
  Appsubnet2CIDR:
   Description: App subnet 2
   Type: String
   Default: 192.168.4.0/24
  Dbsubnet1CIDR:
   Description: App subnet 1
   Type: String
   Default: 192.168.5.0/24
  Dbsubnet2CIDR:
   Description: App subnet 2
   Type: String
   Default: 192.168.6.0/24

Resources:
#create VPC
  testVPC:
   Type: AWS::EC2::VPC
   Properties:
    CidrBlock: !Ref VpcCIDR
    Tags:
     - Key: Env
       Value: test
#create Internet Gateway
  testIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref EnvironmentName
#Attach Internet Gateway to VPC
  testIGWattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
     VpcId: !Ref testVPC
     InternetGatewayId: !Ref testIGW
#Create a public web subnet 1
  WebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref testVPC
      CidrBlock: !Ref Websubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Public Web Subnet (AZ1)
#Create a public web subnet 2
  WebSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref testVPC
      CidrBlock: !Ref Websubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Public Web Subnet (AZ2)
#Create a private App subnet 1
  AppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref testVPC
      CidrBlock: !Ref Appsubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Private App Subnet (AZ1)
#Create a private App subnet 2
  AppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref testVPC
      CidrBlock: !Ref Appsubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Private App Subnet (AZ2)
#Create a private DB subnet 1
  DbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref testVPC
      CidrBlock: !Ref Dbsubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Private DB Subnet 1 (AZ1)
#Create a private DB subnet 2
  DbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref testVPC
      CidrBlock: !Ref Dbsubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Private DB Subnet 2 (AZ2)
#Create Nat gateway EIP
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: testIGW
    Properties: 
       Domain: vpc
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: testIGW
    Properties: 
       Domain: vpc
#Create Nat gateway 
  NatGateway1:
   Type: AWS::EC2::NatGateway
   Properties: 
     AllocationId: !GetAtt NatGateway1EIP.AllocationId
     SubnetId: !Ref WebSubnet1
  NatGateway2:
   Type: AWS::EC2::NatGateway
   Properties: 
     AllocationId:  !GetAtt NatGateway2EIP.AllocationId
     SubnetId: !Ref WebSubnet2
  
#Create a Public Route table 
  PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref testVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes
#create a public route 
  DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: testIGWattachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref testIGW
#Attach Web subnets to Public route 
  WebSubnet1assoc:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref WebSubnet1
  Websubnet2assoc:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref WebSubnet2
#Create private Route table 1
  PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref testVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)
  DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1
#Attach App subnets to Private route 1
  AppSubnet1assoc:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref AppSubnet1
  Appsubnet2assoc:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref AppSubnet2
#Create private Route table 2
  PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref testVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)
  DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2
#Attach App subnets to Private route 2
  DbSubnet1assoc:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref DbSubnet1
  Dbsubnet2assoc:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref DbSubnet2
Outputs: 
    StackVPC: 
        Description: A reference to the created VPC
        Value: !Ref testVPC
        Export:
            Name: testvpc
    PublicSubnet1:
        Description: A list of the public subnets
        Value: !Ref WebSubnet1
        Export:
            Name: websubnet1
    PublicSubnet2:
        Description: A list of the public subnets
        Value: !Ref WebSubnet2
        Export:
            Name: websubnet2
    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref WebSubnet1, !Ref WebSubnet2 ]]
        Export:
            Name: websubnets
